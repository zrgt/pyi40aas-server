from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
import re
from .. import util

from ..models.embedded_data_specification import EmbeddedDataSpecification  # noqa: E501
from ..models.reference import Reference  # noqa: E501
import re  # noqa: E501

class AdministrativeInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded_data_specifications=None, version=None, revision=None, creator=None, template_id=None):  # noqa: E501
        """AdministrativeInformation - a model defined in OpenAPI

        :param embedded_data_specifications: The embedded_data_specifications of this AdministrativeInformation.  # noqa: E501
        :type embedded_data_specifications: List[EmbeddedDataSpecification]
        :param version: The version of this AdministrativeInformation.  # noqa: E501
        :type version: object
        :param revision: The revision of this AdministrativeInformation.  # noqa: E501
        :type revision: object
        :param creator: The creator of this AdministrativeInformation.  # noqa: E501
        :type creator: Reference
        :param template_id: The template_id of this AdministrativeInformation.  # noqa: E501
        :type template_id: str
        """
        self.openapi_types = {
            'embedded_data_specifications': List[EmbeddedDataSpecification],
            'version': object,
            'revision': object,
            'creator': Reference,
            'template_id': str
        }

        self.attribute_map = {
            'embedded_data_specifications': 'embeddedDataSpecifications',
            'version': 'version',
            'revision': 'revision',
            'creator': 'creator',
            'template_id': 'templateId'
        }

        self._embedded_data_specifications = embedded_data_specifications
        self._version = version
        self._revision = revision
        self._creator = creator
        self._template_id = template_id

    @classmethod
    def from_dict(cls, dikt) -> 'AdministrativeInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdministrativeInformation of this AdministrativeInformation.  # noqa: E501
        :rtype: AdministrativeInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded_data_specifications(self) -> List[EmbeddedDataSpecification]:
        """Gets the embedded_data_specifications of this AdministrativeInformation.


        :return: The embedded_data_specifications of this AdministrativeInformation.
        :rtype: List[EmbeddedDataSpecification]
        """
        return self._embedded_data_specifications

    @embedded_data_specifications.setter
    def embedded_data_specifications(self, embedded_data_specifications: List[EmbeddedDataSpecification]):
        """Sets the embedded_data_specifications of this AdministrativeInformation.


        :param embedded_data_specifications: The embedded_data_specifications of this AdministrativeInformation.
        :type embedded_data_specifications: List[EmbeddedDataSpecification]
        """
        if embedded_data_specifications is not None and len(embedded_data_specifications) < 1:
            raise ValueError("Invalid value for `embedded_data_specifications`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._embedded_data_specifications = embedded_data_specifications

    @property
    def version(self) -> object:
        """Gets the version of this AdministrativeInformation.


        :return: The version of this AdministrativeInformation.
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version: object):
        """Sets the version of this AdministrativeInformation.


        :param version: The version of this AdministrativeInformation.
        :type version: object
        """

        self._version = version

    @property
    def revision(self) -> object:
        """Gets the revision of this AdministrativeInformation.


        :return: The revision of this AdministrativeInformation.
        :rtype: object
        """
        return self._revision

    @revision.setter
    def revision(self, revision: object):
        """Sets the revision of this AdministrativeInformation.


        :param revision: The revision of this AdministrativeInformation.
        :type revision: object
        """

        self._revision = revision

    @property
    def creator(self) -> Reference:
        """Gets the creator of this AdministrativeInformation.


        :return: The creator of this AdministrativeInformation.
        :rtype: Reference
        """
        return self._creator

    @creator.setter
    def creator(self, creator: Reference):
        """Sets the creator of this AdministrativeInformation.


        :param creator: The creator of this AdministrativeInformation.
        :type creator: Reference
        """

        self._creator = creator

    @property
    def template_id(self) -> str:
        """Gets the template_id of this AdministrativeInformation.


        :return: The template_id of this AdministrativeInformation.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: str):
        """Sets the template_id of this AdministrativeInformation.


        :param template_id: The template_id of this AdministrativeInformation.
        :type template_id: str
        """
        if template_id is not None and len(template_id) > 2000:
            raise ValueError("Invalid value for `template_id`, length must be less than or equal to `2000`")  # noqa: E501
        if template_id is not None and len(template_id) < 1:
            raise ValueError("Invalid value for `template_id`, length must be greater than or equal to `1`")  # noqa: E501
        if template_id is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', template_id):  # noqa: E501
            raise ValueError("Invalid value for `template_id`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._template_id = template_id
