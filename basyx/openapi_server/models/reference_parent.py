from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.key import Key
from ..models.reference_types import ReferenceTypes
from .. import util

from ..models.key import Key  # noqa: E501
from ..models.reference_types import ReferenceTypes  # noqa: E501

class ReferenceParent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, keys=None):  # noqa: E501
        """ReferenceParent - a model defined in OpenAPI

        :param type: The type of this ReferenceParent.  # noqa: E501
        :type type: ReferenceTypes
        :param keys: The keys of this ReferenceParent.  # noqa: E501
        :type keys: List[Key]
        """
        self.openapi_types = {
            'type': ReferenceTypes,
            'keys': List[Key]
        }

        self.attribute_map = {
            'type': 'type',
            'keys': 'keys'
        }

        self._type = type
        self._keys = keys

    @classmethod
    def from_dict(cls, dikt) -> 'ReferenceParent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReferenceParent of this ReferenceParent.  # noqa: E501
        :rtype: ReferenceParent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> ReferenceTypes:
        """Gets the type of this ReferenceParent.


        :return: The type of this ReferenceParent.
        :rtype: ReferenceTypes
        """
        return self._type

    @type.setter
    def type(self, type: ReferenceTypes):
        """Sets the type of this ReferenceParent.


        :param type: The type of this ReferenceParent.
        :type type: ReferenceTypes
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def keys(self) -> List[Key]:
        """Gets the keys of this ReferenceParent.


        :return: The keys of this ReferenceParent.
        :rtype: List[Key]
        """
        return self._keys

    @keys.setter
    def keys(self, keys: List[Key]):
        """Sets the keys of this ReferenceParent.


        :param keys: The keys of this ReferenceParent.
        :type keys: List[Key]
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")  # noqa: E501
        if keys is not None and len(keys) < 1:
            raise ValueError("Invalid value for `keys`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._keys = keys
