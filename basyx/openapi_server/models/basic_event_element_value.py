from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.reference_value import ReferenceValue
from .. import util

from ..models.reference_value import ReferenceValue  # noqa: E501

class BasicEventElementValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, observed=None):  # noqa: E501
        """BasicEventElementValue - a model defined in OpenAPI

        :param observed: The observed of this BasicEventElementValue.  # noqa: E501
        :type observed: ReferenceValue
        """
        self.openapi_types = {
            'observed': ReferenceValue
        }

        self.attribute_map = {
            'observed': 'observed'
        }

        self._observed = observed

    @classmethod
    def from_dict(cls, dikt) -> 'BasicEventElementValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BasicEventElementValue of this BasicEventElementValue.  # noqa: E501
        :rtype: BasicEventElementValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def observed(self) -> ReferenceValue:
        """Gets the observed of this BasicEventElementValue.


        :return: The observed of this BasicEventElementValue.
        :rtype: ReferenceValue
        """
        return self._observed

    @observed.setter
    def observed(self, observed: ReferenceValue):
        """Sets the observed of this BasicEventElementValue.


        :param observed: The observed of this BasicEventElementValue.
        :type observed: ReferenceValue
        """
        if observed is None:
            raise ValueError("Invalid value for `observed`, must not be `None`")  # noqa: E501

        self._observed = observed
