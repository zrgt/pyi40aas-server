from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.reference import Reference
import re
from .. import util

from ..models.reference import Reference  # noqa: E501
import re  # noqa: E501

class SpecificAssetId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, semantic_id=None, supplemental_semantic_ids=None, name=None, value=None, external_subject_id=None):  # noqa: E501
        """SpecificAssetId - a model defined in OpenAPI

        :param semantic_id: The semantic_id of this SpecificAssetId.  # noqa: E501
        :type semantic_id: Reference
        :param supplemental_semantic_ids: The supplemental_semantic_ids of this SpecificAssetId.  # noqa: E501
        :type supplemental_semantic_ids: List[Reference]
        :param name: The name of this SpecificAssetId.  # noqa: E501
        :type name: str
        :param value: The value of this SpecificAssetId.  # noqa: E501
        :type value: str
        :param external_subject_id: The external_subject_id of this SpecificAssetId.  # noqa: E501
        :type external_subject_id: Reference
        """
        self.openapi_types = {
            'semantic_id': Reference,
            'supplemental_semantic_ids': List[Reference],
            'name': str,
            'value': str,
            'external_subject_id': Reference
        }

        self.attribute_map = {
            'semantic_id': 'semanticId',
            'supplemental_semantic_ids': 'supplementalSemanticIds',
            'name': 'name',
            'value': 'value',
            'external_subject_id': 'externalSubjectId'
        }

        self._semantic_id = semantic_id
        self._supplemental_semantic_ids = supplemental_semantic_ids
        self._name = name
        self._value = value
        self._external_subject_id = external_subject_id

    @classmethod
    def from_dict(cls, dikt) -> 'SpecificAssetId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SpecificAssetId of this SpecificAssetId.  # noqa: E501
        :rtype: SpecificAssetId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def semantic_id(self) -> Reference:
        """Gets the semantic_id of this SpecificAssetId.


        :return: The semantic_id of this SpecificAssetId.
        :rtype: Reference
        """
        return self._semantic_id

    @semantic_id.setter
    def semantic_id(self, semantic_id: Reference):
        """Sets the semantic_id of this SpecificAssetId.


        :param semantic_id: The semantic_id of this SpecificAssetId.
        :type semantic_id: Reference
        """

        self._semantic_id = semantic_id

    @property
    def supplemental_semantic_ids(self) -> List[Reference]:
        """Gets the supplemental_semantic_ids of this SpecificAssetId.


        :return: The supplemental_semantic_ids of this SpecificAssetId.
        :rtype: List[Reference]
        """
        return self._supplemental_semantic_ids

    @supplemental_semantic_ids.setter
    def supplemental_semantic_ids(self, supplemental_semantic_ids: List[Reference]):
        """Sets the supplemental_semantic_ids of this SpecificAssetId.


        :param supplemental_semantic_ids: The supplemental_semantic_ids of this SpecificAssetId.
        :type supplemental_semantic_ids: List[Reference]
        """
        if supplemental_semantic_ids is not None and len(supplemental_semantic_ids) < 1:
            raise ValueError("Invalid value for `supplemental_semantic_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supplemental_semantic_ids = supplemental_semantic_ids

    @property
    def name(self) -> str:
        """Gets the name of this SpecificAssetId.


        :return: The name of this SpecificAssetId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SpecificAssetId.


        :param name: The name of this SpecificAssetId.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._name = name

    @property
    def value(self) -> str:
        """Gets the value of this SpecificAssetId.


        :return: The value of this SpecificAssetId.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this SpecificAssetId.


        :param value: The value of this SpecificAssetId.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and len(value) > 2000:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2000`")  # noqa: E501
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")  # noqa: E501
        if value is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', value):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._value = value

    @property
    def external_subject_id(self) -> Reference:
        """Gets the external_subject_id of this SpecificAssetId.


        :return: The external_subject_id of this SpecificAssetId.
        :rtype: Reference
        """
        return self._external_subject_id

    @external_subject_id.setter
    def external_subject_id(self, external_subject_id: Reference):
        """Sets the external_subject_id of this SpecificAssetId.


        :param external_subject_id: The external_subject_id of this SpecificAssetId.
        :type external_subject_id: Reference
        """

        self._external_subject_id = external_subject_id
