from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.data_type_iec61360 import DataTypeIec61360
from ..models.lang_string_definition_type_iec61360 import LangStringDefinitionTypeIec61360
from ..models.lang_string_preferred_name_type_iec61360 import LangStringPreferredNameTypeIec61360
from ..models.lang_string_short_name_type_iec61360 import LangStringShortNameTypeIec61360
from ..models.level_type import LevelType
from ..models.reference import Reference
from ..models.value_list import ValueList
import re
from .. import util

from ..models.data_type_iec61360 import DataTypeIec61360  # noqa: E501
from ..models.lang_string_definition_type_iec61360 import LangStringDefinitionTypeIec61360  # noqa: E501
from ..models.lang_string_preferred_name_type_iec61360 import LangStringPreferredNameTypeIec61360  # noqa: E501
from ..models.lang_string_short_name_type_iec61360 import LangStringShortNameTypeIec61360  # noqa: E501
from ..models.level_type import LevelType  # noqa: E501
from ..models.reference import Reference  # noqa: E501
from ..models.value_list import ValueList  # noqa: E501
import re  # noqa: E501

class DataSpecificationIec61360(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_type=None, preferred_name=None, short_name=None, unit=None, unit_id=None, source_of_definition=None, symbol=None, data_type=None, definition=None, value_format=None, value_list=None, value=None, level_type=None):  # noqa: E501
        """DataSpecificationIec61360 - a model defined in OpenAPI

        :param model_type: The model_type of this DataSpecificationIec61360.  # noqa: E501
        :type model_type: str
        :param preferred_name: The preferred_name of this DataSpecificationIec61360.  # noqa: E501
        :type preferred_name: List[LangStringPreferredNameTypeIec61360]
        :param short_name: The short_name of this DataSpecificationIec61360.  # noqa: E501
        :type short_name: List[LangStringShortNameTypeIec61360]
        :param unit: The unit of this DataSpecificationIec61360.  # noqa: E501
        :type unit: str
        :param unit_id: The unit_id of this DataSpecificationIec61360.  # noqa: E501
        :type unit_id: Reference
        :param source_of_definition: The source_of_definition of this DataSpecificationIec61360.  # noqa: E501
        :type source_of_definition: str
        :param symbol: The symbol of this DataSpecificationIec61360.  # noqa: E501
        :type symbol: str
        :param data_type: The data_type of this DataSpecificationIec61360.  # noqa: E501
        :type data_type: DataTypeIec61360
        :param definition: The definition of this DataSpecificationIec61360.  # noqa: E501
        :type definition: List[LangStringDefinitionTypeIec61360]
        :param value_format: The value_format of this DataSpecificationIec61360.  # noqa: E501
        :type value_format: str
        :param value_list: The value_list of this DataSpecificationIec61360.  # noqa: E501
        :type value_list: ValueList
        :param value: The value of this DataSpecificationIec61360.  # noqa: E501
        :type value: str
        :param level_type: The level_type of this DataSpecificationIec61360.  # noqa: E501
        :type level_type: LevelType
        """
        self.openapi_types = {
            'model_type': str,
            'preferred_name': List[LangStringPreferredNameTypeIec61360],
            'short_name': List[LangStringShortNameTypeIec61360],
            'unit': str,
            'unit_id': Reference,
            'source_of_definition': str,
            'symbol': str,
            'data_type': DataTypeIec61360,
            'definition': List[LangStringDefinitionTypeIec61360],
            'value_format': str,
            'value_list': ValueList,
            'value': str,
            'level_type': LevelType
        }

        self.attribute_map = {
            'model_type': 'modelType',
            'preferred_name': 'preferredName',
            'short_name': 'shortName',
            'unit': 'unit',
            'unit_id': 'unitId',
            'source_of_definition': 'sourceOfDefinition',
            'symbol': 'symbol',
            'data_type': 'dataType',
            'definition': 'definition',
            'value_format': 'valueFormat',
            'value_list': 'valueList',
            'value': 'value',
            'level_type': 'levelType'
        }

        self._model_type = model_type
        self._preferred_name = preferred_name
        self._short_name = short_name
        self._unit = unit
        self._unit_id = unit_id
        self._source_of_definition = source_of_definition
        self._symbol = symbol
        self._data_type = data_type
        self._definition = definition
        self._value_format = value_format
        self._value_list = value_list
        self._value = value
        self._level_type = level_type

    @classmethod
    def from_dict(cls, dikt) -> 'DataSpecificationIec61360':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataSpecificationIec61360 of this DataSpecificationIec61360.  # noqa: E501
        :rtype: DataSpecificationIec61360
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_type(self) -> str:
        """Gets the model_type of this DataSpecificationIec61360.


        :return: The model_type of this DataSpecificationIec61360.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: str):
        """Sets the model_type of this DataSpecificationIec61360.


        :param model_type: The model_type of this DataSpecificationIec61360.
        :type model_type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        if model_type is not None and not re.search(r'DataSpecificationIec61360', model_type):  # noqa: E501
            raise ValueError("Invalid value for `model_type`, must be a follow pattern or equal to `/DataSpecificationIec61360/`")  # noqa: E501

        self._model_type = model_type

    @property
    def preferred_name(self) -> List[LangStringPreferredNameTypeIec61360]:
        """Gets the preferred_name of this DataSpecificationIec61360.


        :return: The preferred_name of this DataSpecificationIec61360.
        :rtype: List[LangStringPreferredNameTypeIec61360]
        """
        return self._preferred_name

    @preferred_name.setter
    def preferred_name(self, preferred_name: List[LangStringPreferredNameTypeIec61360]):
        """Sets the preferred_name of this DataSpecificationIec61360.


        :param preferred_name: The preferred_name of this DataSpecificationIec61360.
        :type preferred_name: List[LangStringPreferredNameTypeIec61360]
        """
        if preferred_name is None:
            raise ValueError("Invalid value for `preferred_name`, must not be `None`")  # noqa: E501
        if preferred_name is not None and len(preferred_name) < 1:
            raise ValueError("Invalid value for `preferred_name`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._preferred_name = preferred_name

    @property
    def short_name(self) -> List[LangStringShortNameTypeIec61360]:
        """Gets the short_name of this DataSpecificationIec61360.


        :return: The short_name of this DataSpecificationIec61360.
        :rtype: List[LangStringShortNameTypeIec61360]
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name: List[LangStringShortNameTypeIec61360]):
        """Sets the short_name of this DataSpecificationIec61360.


        :param short_name: The short_name of this DataSpecificationIec61360.
        :type short_name: List[LangStringShortNameTypeIec61360]
        """
        if short_name is not None and len(short_name) < 1:
            raise ValueError("Invalid value for `short_name`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._short_name = short_name

    @property
    def unit(self) -> str:
        """Gets the unit of this DataSpecificationIec61360.


        :return: The unit of this DataSpecificationIec61360.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this DataSpecificationIec61360.


        :param unit: The unit of this DataSpecificationIec61360.
        :type unit: str
        """
        if unit is not None and len(unit) < 1:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")  # noqa: E501
        if unit is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', unit):  # noqa: E501
            raise ValueError("Invalid value for `unit`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._unit = unit

    @property
    def unit_id(self) -> Reference:
        """Gets the unit_id of this DataSpecificationIec61360.


        :return: The unit_id of this DataSpecificationIec61360.
        :rtype: Reference
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id: Reference):
        """Sets the unit_id of this DataSpecificationIec61360.


        :param unit_id: The unit_id of this DataSpecificationIec61360.
        :type unit_id: Reference
        """

        self._unit_id = unit_id

    @property
    def source_of_definition(self) -> str:
        """Gets the source_of_definition of this DataSpecificationIec61360.


        :return: The source_of_definition of this DataSpecificationIec61360.
        :rtype: str
        """
        return self._source_of_definition

    @source_of_definition.setter
    def source_of_definition(self, source_of_definition: str):
        """Sets the source_of_definition of this DataSpecificationIec61360.


        :param source_of_definition: The source_of_definition of this DataSpecificationIec61360.
        :type source_of_definition: str
        """
        if source_of_definition is not None and len(source_of_definition) < 1:
            raise ValueError("Invalid value for `source_of_definition`, length must be greater than or equal to `1`")  # noqa: E501
        if source_of_definition is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', source_of_definition):  # noqa: E501
            raise ValueError("Invalid value for `source_of_definition`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._source_of_definition = source_of_definition

    @property
    def symbol(self) -> str:
        """Gets the symbol of this DataSpecificationIec61360.


        :return: The symbol of this DataSpecificationIec61360.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this DataSpecificationIec61360.


        :param symbol: The symbol of this DataSpecificationIec61360.
        :type symbol: str
        """
        if symbol is not None and len(symbol) < 1:
            raise ValueError("Invalid value for `symbol`, length must be greater than or equal to `1`")  # noqa: E501
        if symbol is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', symbol):  # noqa: E501
            raise ValueError("Invalid value for `symbol`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._symbol = symbol

    @property
    def data_type(self) -> DataTypeIec61360:
        """Gets the data_type of this DataSpecificationIec61360.


        :return: The data_type of this DataSpecificationIec61360.
        :rtype: DataTypeIec61360
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: DataTypeIec61360):
        """Sets the data_type of this DataSpecificationIec61360.


        :param data_type: The data_type of this DataSpecificationIec61360.
        :type data_type: DataTypeIec61360
        """

        self._data_type = data_type

    @property
    def definition(self) -> List[LangStringDefinitionTypeIec61360]:
        """Gets the definition of this DataSpecificationIec61360.


        :return: The definition of this DataSpecificationIec61360.
        :rtype: List[LangStringDefinitionTypeIec61360]
        """
        return self._definition

    @definition.setter
    def definition(self, definition: List[LangStringDefinitionTypeIec61360]):
        """Sets the definition of this DataSpecificationIec61360.


        :param definition: The definition of this DataSpecificationIec61360.
        :type definition: List[LangStringDefinitionTypeIec61360]
        """
        if definition is not None and len(definition) < 1:
            raise ValueError("Invalid value for `definition`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._definition = definition

    @property
    def value_format(self) -> str:
        """Gets the value_format of this DataSpecificationIec61360.


        :return: The value_format of this DataSpecificationIec61360.
        :rtype: str
        """
        return self._value_format

    @value_format.setter
    def value_format(self, value_format: str):
        """Sets the value_format of this DataSpecificationIec61360.


        :param value_format: The value_format of this DataSpecificationIec61360.
        :type value_format: str
        """
        if value_format is not None and len(value_format) < 1:
            raise ValueError("Invalid value for `value_format`, length must be greater than or equal to `1`")  # noqa: E501
        if value_format is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', value_format):  # noqa: E501
            raise ValueError("Invalid value for `value_format`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._value_format = value_format

    @property
    def value_list(self) -> ValueList:
        """Gets the value_list of this DataSpecificationIec61360.


        :return: The value_list of this DataSpecificationIec61360.
        :rtype: ValueList
        """
        return self._value_list

    @value_list.setter
    def value_list(self, value_list: ValueList):
        """Sets the value_list of this DataSpecificationIec61360.


        :param value_list: The value_list of this DataSpecificationIec61360.
        :type value_list: ValueList
        """

        self._value_list = value_list

    @property
    def value(self) -> str:
        """Gets the value of this DataSpecificationIec61360.


        :return: The value of this DataSpecificationIec61360.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this DataSpecificationIec61360.


        :param value: The value of this DataSpecificationIec61360.
        :type value: str
        """
        if value is not None and len(value) > 2000:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2000`")  # noqa: E501
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")  # noqa: E501
        if value is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', value):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._value = value

    @property
    def level_type(self) -> LevelType:
        """Gets the level_type of this DataSpecificationIec61360.


        :return: The level_type of this DataSpecificationIec61360.
        :rtype: LevelType
        """
        return self._level_type

    @level_type.setter
    def level_type(self, level_type: LevelType):
        """Sets the level_type of this DataSpecificationIec61360.


        :param level_type: The level_type of this DataSpecificationIec61360.
        :type level_type: LevelType
        """

        self._level_type = level_type
