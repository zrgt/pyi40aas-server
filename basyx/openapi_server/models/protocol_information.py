from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.protocol_information_security_attributes import ProtocolInformationSecurityAttributes
from .. import util

from ..models.protocol_information_security_attributes import ProtocolInformationSecurityAttributes  # noqa: E501

class ProtocolInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href=None, endpoint_protocol=None, endpoint_protocol_version=None, subprotocol=None, subprotocol_body=None, subprotocol_body_encoding=None, security_attributes=None):  # noqa: E501
        """ProtocolInformation - a model defined in OpenAPI

        :param href: The href of this ProtocolInformation.  # noqa: E501
        :type href: str
        :param endpoint_protocol: The endpoint_protocol of this ProtocolInformation.  # noqa: E501
        :type endpoint_protocol: str
        :param endpoint_protocol_version: The endpoint_protocol_version of this ProtocolInformation.  # noqa: E501
        :type endpoint_protocol_version: List[str]
        :param subprotocol: The subprotocol of this ProtocolInformation.  # noqa: E501
        :type subprotocol: str
        :param subprotocol_body: The subprotocol_body of this ProtocolInformation.  # noqa: E501
        :type subprotocol_body: str
        :param subprotocol_body_encoding: The subprotocol_body_encoding of this ProtocolInformation.  # noqa: E501
        :type subprotocol_body_encoding: str
        :param security_attributes: The security_attributes of this ProtocolInformation.  # noqa: E501
        :type security_attributes: List[ProtocolInformationSecurityAttributes]
        """
        self.openapi_types = {
            'href': str,
            'endpoint_protocol': str,
            'endpoint_protocol_version': List[str],
            'subprotocol': str,
            'subprotocol_body': str,
            'subprotocol_body_encoding': str,
            'security_attributes': List[ProtocolInformationSecurityAttributes]
        }

        self.attribute_map = {
            'href': 'href',
            'endpoint_protocol': 'endpointProtocol',
            'endpoint_protocol_version': 'endpointProtocolVersion',
            'subprotocol': 'subprotocol',
            'subprotocol_body': 'subprotocolBody',
            'subprotocol_body_encoding': 'subprotocolBodyEncoding',
            'security_attributes': 'securityAttributes'
        }

        self._href = href
        self._endpoint_protocol = endpoint_protocol
        self._endpoint_protocol_version = endpoint_protocol_version
        self._subprotocol = subprotocol
        self._subprotocol_body = subprotocol_body
        self._subprotocol_body_encoding = subprotocol_body_encoding
        self._security_attributes = security_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'ProtocolInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProtocolInformation of this ProtocolInformation.  # noqa: E501
        :rtype: ProtocolInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self) -> str:
        """Gets the href of this ProtocolInformation.


        :return: The href of this ProtocolInformation.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href: str):
        """Sets the href of this ProtocolInformation.


        :param href: The href of this ProtocolInformation.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501
        if href is not None and len(href) > 2048:
            raise ValueError("Invalid value for `href`, length must be less than or equal to `2048`")  # noqa: E501

        self._href = href

    @property
    def endpoint_protocol(self) -> str:
        """Gets the endpoint_protocol of this ProtocolInformation.


        :return: The endpoint_protocol of this ProtocolInformation.
        :rtype: str
        """
        return self._endpoint_protocol

    @endpoint_protocol.setter
    def endpoint_protocol(self, endpoint_protocol: str):
        """Sets the endpoint_protocol of this ProtocolInformation.


        :param endpoint_protocol: The endpoint_protocol of this ProtocolInformation.
        :type endpoint_protocol: str
        """
        if endpoint_protocol is not None and len(endpoint_protocol) > 128:
            raise ValueError("Invalid value for `endpoint_protocol`, length must be less than or equal to `128`")  # noqa: E501

        self._endpoint_protocol = endpoint_protocol

    @property
    def endpoint_protocol_version(self) -> List[str]:
        """Gets the endpoint_protocol_version of this ProtocolInformation.


        :return: The endpoint_protocol_version of this ProtocolInformation.
        :rtype: List[str]
        """
        return self._endpoint_protocol_version

    @endpoint_protocol_version.setter
    def endpoint_protocol_version(self, endpoint_protocol_version: List[str]):
        """Sets the endpoint_protocol_version of this ProtocolInformation.


        :param endpoint_protocol_version: The endpoint_protocol_version of this ProtocolInformation.
        :type endpoint_protocol_version: List[str]
        """

        self._endpoint_protocol_version = endpoint_protocol_version

    @property
    def subprotocol(self) -> str:
        """Gets the subprotocol of this ProtocolInformation.


        :return: The subprotocol of this ProtocolInformation.
        :rtype: str
        """
        return self._subprotocol

    @subprotocol.setter
    def subprotocol(self, subprotocol: str):
        """Sets the subprotocol of this ProtocolInformation.


        :param subprotocol: The subprotocol of this ProtocolInformation.
        :type subprotocol: str
        """
        if subprotocol is not None and len(subprotocol) > 128:
            raise ValueError("Invalid value for `subprotocol`, length must be less than or equal to `128`")  # noqa: E501

        self._subprotocol = subprotocol

    @property
    def subprotocol_body(self) -> str:
        """Gets the subprotocol_body of this ProtocolInformation.


        :return: The subprotocol_body of this ProtocolInformation.
        :rtype: str
        """
        return self._subprotocol_body

    @subprotocol_body.setter
    def subprotocol_body(self, subprotocol_body: str):
        """Sets the subprotocol_body of this ProtocolInformation.


        :param subprotocol_body: The subprotocol_body of this ProtocolInformation.
        :type subprotocol_body: str
        """
        if subprotocol_body is not None and len(subprotocol_body) > 128:
            raise ValueError("Invalid value for `subprotocol_body`, length must be less than or equal to `128`")  # noqa: E501

        self._subprotocol_body = subprotocol_body

    @property
    def subprotocol_body_encoding(self) -> str:
        """Gets the subprotocol_body_encoding of this ProtocolInformation.


        :return: The subprotocol_body_encoding of this ProtocolInformation.
        :rtype: str
        """
        return self._subprotocol_body_encoding

    @subprotocol_body_encoding.setter
    def subprotocol_body_encoding(self, subprotocol_body_encoding: str):
        """Sets the subprotocol_body_encoding of this ProtocolInformation.


        :param subprotocol_body_encoding: The subprotocol_body_encoding of this ProtocolInformation.
        :type subprotocol_body_encoding: str
        """
        if subprotocol_body_encoding is not None and len(subprotocol_body_encoding) > 128:
            raise ValueError("Invalid value for `subprotocol_body_encoding`, length must be less than or equal to `128`")  # noqa: E501

        self._subprotocol_body_encoding = subprotocol_body_encoding

    @property
    def security_attributes(self) -> List[ProtocolInformationSecurityAttributes]:
        """Gets the security_attributes of this ProtocolInformation.


        :return: The security_attributes of this ProtocolInformation.
        :rtype: List[ProtocolInformationSecurityAttributes]
        """
        return self._security_attributes

    @security_attributes.setter
    def security_attributes(self, security_attributes: List[ProtocolInformationSecurityAttributes]):
        """Sets the security_attributes of this ProtocolInformation.


        :param security_attributes: The security_attributes of this ProtocolInformation.
        :type security_attributes: List[ProtocolInformationSecurityAttributes]
        """
        if security_attributes is not None and len(security_attributes) < 1:
            raise ValueError("Invalid value for `security_attributes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._security_attributes = security_attributes
