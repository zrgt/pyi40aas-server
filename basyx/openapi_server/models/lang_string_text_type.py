from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
import re
from .. import util

import re  # noqa: E501

class LangStringTextType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language=None, text=None):  # noqa: E501
        """LangStringTextType - a model defined in OpenAPI

        :param language: The language of this LangStringTextType.  # noqa: E501
        :type language: str
        :param text: The text of this LangStringTextType.  # noqa: E501
        :type text: object
        """
        self.openapi_types = {
            'language': str,
            'text': object
        }

        self.attribute_map = {
            'language': 'language',
            'text': 'text'
        }

        self._language = language
        self._text = text

    @classmethod
    def from_dict(cls, dikt) -> 'LangStringTextType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LangStringTextType of this LangStringTextType.  # noqa: E501
        :rtype: LangStringTextType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self) -> str:
        """Gets the language of this LangStringTextType.


        :return: The language of this LangStringTextType.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this LangStringTextType.


        :param language: The language of this LangStringTextType.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        if language is not None and not re.search(r'^(([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){2})?|[a-zA-Z]{4}|[a-zA-Z]{5,8})(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-(([a-zA-Z0-9]){5,8}|[0-9]([a-zA-Z0-9]){3}))*(-[0-9A-WY-Za-wy-z](-([a-zA-Z0-9]){2,8})+)*(-[xX](-([a-zA-Z0-9]){1,8})+)?|[xX](-([a-zA-Z0-9]){1,8})+|((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)))$', language):  # noqa: E501
            raise ValueError("Invalid value for `language`, must be a follow pattern or equal to `/^(([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){2})?|[a-zA-Z]{4}|[a-zA-Z]{5,8})(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-(([a-zA-Z0-9]){5,8}|[0-9]([a-zA-Z0-9]){3}))*(-[0-9A-WY-Za-wy-z](-([a-zA-Z0-9]){2,8})+)*(-[xX](-([a-zA-Z0-9]){1,8})+)?|[xX](-([a-zA-Z0-9]){1,8})+|((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)))$/`")  # noqa: E501

        self._language = language

    @property
    def text(self) -> object:
        """Gets the text of this LangStringTextType.


        :return: The text of this LangStringTextType.
        :rtype: object
        """
        return self._text

    @text.setter
    def text(self, text: object):
        """Sets the text of this LangStringTextType.


        :param text: The text of this LangStringTextType.
        :type text: object
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501
        if text is not None and len(text) > 1023:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `1023`")  # noqa: E501

        self._text = text
