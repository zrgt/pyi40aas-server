from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.reference import Reference
import re
from .. import util

from ..models.reference import Reference  # noqa: E501
import re  # noqa: E501

class ValueReferencePair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, value_id=None):  # noqa: E501
        """ValueReferencePair - a model defined in OpenAPI

        :param value: The value of this ValueReferencePair.  # noqa: E501
        :type value: str
        :param value_id: The value_id of this ValueReferencePair.  # noqa: E501
        :type value_id: Reference
        """
        self.openapi_types = {
            'value': str,
            'value_id': Reference
        }

        self.attribute_map = {
            'value': 'value',
            'value_id': 'valueId'
        }

        self._value = value
        self._value_id = value_id

    @classmethod
    def from_dict(cls, dikt) -> 'ValueReferencePair':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValueReferencePair of this ValueReferencePair.  # noqa: E501
        :rtype: ValueReferencePair
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> str:
        """Gets the value of this ValueReferencePair.


        :return: The value of this ValueReferencePair.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ValueReferencePair.


        :param value: The value of this ValueReferencePair.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and len(value) > 2000:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2000`")  # noqa: E501
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")  # noqa: E501
        if value is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', value):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._value = value

    @property
    def value_id(self) -> Reference:
        """Gets the value_id of this ValueReferencePair.


        :return: The value_id of this ValueReferencePair.
        :rtype: Reference
        """
        return self._value_id

    @value_id.setter
    def value_id(self, value_id: Reference):
        """Sets the value_id of this ValueReferencePair.


        :param value_id: The value_id of this ValueReferencePair.
        :type value_id: Reference
        """
        if value_id is None:
            raise ValueError("Invalid value for `value_id`, must not be `None`")  # noqa: E501

        self._value_id = value_id
