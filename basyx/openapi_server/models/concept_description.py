from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.administrative_information import AdministrativeInformation
from ..models.embedded_data_specification import EmbeddedDataSpecification
from ..models.extension import Extension
from ..models.lang_string_name_type import LangStringNameType
from ..models.lang_string_text_type import LangStringTextType
from ..models.reference import Reference
import re
from .. import util

from ..models.administrative_information import AdministrativeInformation  # noqa: E501
from ..models.embedded_data_specification import EmbeddedDataSpecification  # noqa: E501
from ..models.extension import Extension  # noqa: E501
from ..models.lang_string_name_type import LangStringNameType  # noqa: E501
from ..models.lang_string_text_type import LangStringTextType  # noqa: E501
from ..models.reference import Reference  # noqa: E501
import re  # noqa: E501

class ConceptDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extensions=None, category=None, id_short=None, display_name=None, description=None, model_type=None, administration=None, id=None, embedded_data_specifications=None, is_case_of=None):  # noqa: E501
        """ConceptDescription - a model defined in OpenAPI

        :param extensions: The extensions of this ConceptDescription.  # noqa: E501
        :type extensions: List[Extension]
        :param category: The category of this ConceptDescription.  # noqa: E501
        :type category: str
        :param id_short: The id_short of this ConceptDescription.  # noqa: E501
        :type id_short: object
        :param display_name: The display_name of this ConceptDescription.  # noqa: E501
        :type display_name: List[LangStringNameType]
        :param description: The description of this ConceptDescription.  # noqa: E501
        :type description: List[LangStringTextType]
        :param model_type: The model_type of this ConceptDescription.  # noqa: E501
        :type model_type: str
        :param administration: The administration of this ConceptDescription.  # noqa: E501
        :type administration: AdministrativeInformation
        :param id: The id of this ConceptDescription.  # noqa: E501
        :type id: str
        :param embedded_data_specifications: The embedded_data_specifications of this ConceptDescription.  # noqa: E501
        :type embedded_data_specifications: List[EmbeddedDataSpecification]
        :param is_case_of: The is_case_of of this ConceptDescription.  # noqa: E501
        :type is_case_of: List[Reference]
        """
        self.openapi_types = {
            'extensions': List[Extension],
            'category': str,
            'id_short': object,
            'display_name': List[LangStringNameType],
            'description': List[LangStringTextType],
            'model_type': str,
            'administration': AdministrativeInformation,
            'id': str,
            'embedded_data_specifications': List[EmbeddedDataSpecification],
            'is_case_of': List[Reference]
        }

        self.attribute_map = {
            'extensions': 'extensions',
            'category': 'category',
            'id_short': 'idShort',
            'display_name': 'displayName',
            'description': 'description',
            'model_type': 'modelType',
            'administration': 'administration',
            'id': 'id',
            'embedded_data_specifications': 'embeddedDataSpecifications',
            'is_case_of': 'isCaseOf'
        }

        self._extensions = extensions
        self._category = category
        self._id_short = id_short
        self._display_name = display_name
        self._description = description
        self._model_type = model_type
        self._administration = administration
        self._id = id
        self._embedded_data_specifications = embedded_data_specifications
        self._is_case_of = is_case_of

    @classmethod
    def from_dict(cls, dikt) -> 'ConceptDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConceptDescription of this ConceptDescription.  # noqa: E501
        :rtype: ConceptDescription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extensions(self) -> List[Extension]:
        """Gets the extensions of this ConceptDescription.


        :return: The extensions of this ConceptDescription.
        :rtype: List[Extension]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions: List[Extension]):
        """Sets the extensions of this ConceptDescription.


        :param extensions: The extensions of this ConceptDescription.
        :type extensions: List[Extension]
        """
        if extensions is not None and len(extensions) < 1:
            raise ValueError("Invalid value for `extensions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._extensions = extensions

    @property
    def category(self) -> str:
        """Gets the category of this ConceptDescription.


        :return: The category of this ConceptDescription.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this ConceptDescription.


        :param category: The category of this ConceptDescription.
        :type category: str
        """
        if category is not None and len(category) > 128:
            raise ValueError("Invalid value for `category`, length must be less than or equal to `128`")  # noqa: E501
        if category is not None and len(category) < 1:
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `1`")  # noqa: E501
        if category is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', category):  # noqa: E501
            raise ValueError("Invalid value for `category`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._category = category

    @property
    def id_short(self) -> object:
        """Gets the id_short of this ConceptDescription.


        :return: The id_short of this ConceptDescription.
        :rtype: object
        """
        return self._id_short

    @id_short.setter
    def id_short(self, id_short: object):
        """Sets the id_short of this ConceptDescription.


        :param id_short: The id_short of this ConceptDescription.
        :type id_short: object
        """

        self._id_short = id_short

    @property
    def display_name(self) -> List[LangStringNameType]:
        """Gets the display_name of this ConceptDescription.


        :return: The display_name of this ConceptDescription.
        :rtype: List[LangStringNameType]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: List[LangStringNameType]):
        """Sets the display_name of this ConceptDescription.


        :param display_name: The display_name of this ConceptDescription.
        :type display_name: List[LangStringNameType]
        """
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self) -> List[LangStringTextType]:
        """Gets the description of this ConceptDescription.


        :return: The description of this ConceptDescription.
        :rtype: List[LangStringTextType]
        """
        return self._description

    @description.setter
    def description(self, description: List[LangStringTextType]):
        """Sets the description of this ConceptDescription.


        :param description: The description of this ConceptDescription.
        :type description: List[LangStringTextType]
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def model_type(self) -> str:
        """Gets the model_type of this ConceptDescription.


        :return: The model_type of this ConceptDescription.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: str):
        """Sets the model_type of this ConceptDescription.


        :param model_type: The model_type of this ConceptDescription.
        :type model_type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        if model_type is not None and not re.search(r'ConceptDescription', model_type):  # noqa: E501
            raise ValueError("Invalid value for `model_type`, must be a follow pattern or equal to `/ConceptDescription/`")  # noqa: E501

        self._model_type = model_type

    @property
    def administration(self) -> AdministrativeInformation:
        """Gets the administration of this ConceptDescription.


        :return: The administration of this ConceptDescription.
        :rtype: AdministrativeInformation
        """
        return self._administration

    @administration.setter
    def administration(self, administration: AdministrativeInformation):
        """Sets the administration of this ConceptDescription.


        :param administration: The administration of this ConceptDescription.
        :type administration: AdministrativeInformation
        """

        self._administration = administration

    @property
    def id(self) -> str:
        """Gets the id of this ConceptDescription.


        :return: The id of this ConceptDescription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ConceptDescription.


        :param id: The id of this ConceptDescription.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 2000:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `2000`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501
        if id is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._id = id

    @property
    def embedded_data_specifications(self) -> List[EmbeddedDataSpecification]:
        """Gets the embedded_data_specifications of this ConceptDescription.


        :return: The embedded_data_specifications of this ConceptDescription.
        :rtype: List[EmbeddedDataSpecification]
        """
        return self._embedded_data_specifications

    @embedded_data_specifications.setter
    def embedded_data_specifications(self, embedded_data_specifications: List[EmbeddedDataSpecification]):
        """Sets the embedded_data_specifications of this ConceptDescription.


        :param embedded_data_specifications: The embedded_data_specifications of this ConceptDescription.
        :type embedded_data_specifications: List[EmbeddedDataSpecification]
        """
        if embedded_data_specifications is not None and len(embedded_data_specifications) < 1:
            raise ValueError("Invalid value for `embedded_data_specifications`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._embedded_data_specifications = embedded_data_specifications

    @property
    def is_case_of(self) -> List[Reference]:
        """Gets the is_case_of of this ConceptDescription.


        :return: The is_case_of of this ConceptDescription.
        :rtype: List[Reference]
        """
        return self._is_case_of

    @is_case_of.setter
    def is_case_of(self, is_case_of: List[Reference]):
        """Sets the is_case_of of this ConceptDescription.


        :param is_case_of: The is_case_of of this ConceptDescription.
        :type is_case_of: List[Reference]
        """
        if is_case_of is not None and len(is_case_of) < 1:
            raise ValueError("Invalid value for `is_case_of`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._is_case_of = is_case_of
