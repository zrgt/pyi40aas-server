from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from .. import util


class ServiceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profiles=None):  # noqa: E501
        """ServiceDescription - a model defined in OpenAPI

        :param profiles: The profiles of this ServiceDescription.  # noqa: E501
        :type profiles: List[str]
        """
        self.openapi_types = {
            'profiles': List[str]
        }

        self.attribute_map = {
            'profiles': 'profiles'
        }

        self._profiles = profiles

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceDescription of this ServiceDescription.  # noqa: E501
        :rtype: ServiceDescription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profiles(self) -> List[str]:
        """Gets the profiles of this ServiceDescription.


        :return: The profiles of this ServiceDescription.
        :rtype: List[str]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles: List[str]):
        """Sets the profiles of this ServiceDescription.


        :param profiles: The profiles of this ServiceDescription.
        :type profiles: List[str]
        """
        allowed_values = ["https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002", "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002", "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003", "https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002", "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002", "https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002", "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001", "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002", "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003", "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004", "https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001"]  # noqa: E501
        if not set(profiles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `profiles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(profiles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._profiles = profiles
