from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.reference import Reference
from .. import util

from ..models.reference import Reference  # noqa: E501

class HasSemantics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, semantic_id=None, supplemental_semantic_ids=None):  # noqa: E501
        """HasSemantics - a model defined in OpenAPI

        :param semantic_id: The semantic_id of this HasSemantics.  # noqa: E501
        :type semantic_id: Reference
        :param supplemental_semantic_ids: The supplemental_semantic_ids of this HasSemantics.  # noqa: E501
        :type supplemental_semantic_ids: List[Reference]
        """
        self.openapi_types = {
            'semantic_id': Reference,
            'supplemental_semantic_ids': List[Reference]
        }

        self.attribute_map = {
            'semantic_id': 'semanticId',
            'supplemental_semantic_ids': 'supplementalSemanticIds'
        }

        self._semantic_id = semantic_id
        self._supplemental_semantic_ids = supplemental_semantic_ids

    @classmethod
    def from_dict(cls, dikt) -> 'HasSemantics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HasSemantics of this HasSemantics.  # noqa: E501
        :rtype: HasSemantics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def semantic_id(self) -> Reference:
        """Gets the semantic_id of this HasSemantics.


        :return: The semantic_id of this HasSemantics.
        :rtype: Reference
        """
        return self._semantic_id

    @semantic_id.setter
    def semantic_id(self, semantic_id: Reference):
        """Sets the semantic_id of this HasSemantics.


        :param semantic_id: The semantic_id of this HasSemantics.
        :type semantic_id: Reference
        """

        self._semantic_id = semantic_id

    @property
    def supplemental_semantic_ids(self) -> List[Reference]:
        """Gets the supplemental_semantic_ids of this HasSemantics.


        :return: The supplemental_semantic_ids of this HasSemantics.
        :rtype: List[Reference]
        """
        return self._supplemental_semantic_ids

    @supplemental_semantic_ids.setter
    def supplemental_semantic_ids(self, supplemental_semantic_ids: List[Reference]):
        """Sets the supplemental_semantic_ids of this HasSemantics.


        :param supplemental_semantic_ids: The supplemental_semantic_ids of this HasSemantics.
        :type supplemental_semantic_ids: List[Reference]
        """
        if supplemental_semantic_ids is not None and len(supplemental_semantic_ids) < 1:
            raise ValueError("Invalid value for `supplemental_semantic_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supplemental_semantic_ids = supplemental_semantic_ids
