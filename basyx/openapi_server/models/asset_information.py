from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from ..models.asset_kind import AssetKind
from ..models.resource import Resource
from ..models.specific_asset_id import SpecificAssetId
import re
from .. import util

from ..models.asset_kind import AssetKind  # noqa: E501
from ..models.resource import Resource  # noqa: E501
from ..models.specific_asset_id import SpecificAssetId  # noqa: E501
import re  # noqa: E501

class AssetInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_kind=None, global_asset_id=None, specific_asset_ids=None, asset_type=None, default_thumbnail=None):  # noqa: E501
        """AssetInformation - a model defined in OpenAPI

        :param asset_kind: The asset_kind of this AssetInformation.  # noqa: E501
        :type asset_kind: AssetKind
        :param global_asset_id: The global_asset_id of this AssetInformation.  # noqa: E501
        :type global_asset_id: str
        :param specific_asset_ids: The specific_asset_ids of this AssetInformation.  # noqa: E501
        :type specific_asset_ids: List[SpecificAssetId]
        :param asset_type: The asset_type of this AssetInformation.  # noqa: E501
        :type asset_type: str
        :param default_thumbnail: The default_thumbnail of this AssetInformation.  # noqa: E501
        :type default_thumbnail: Resource
        """
        self.openapi_types = {
            'asset_kind': AssetKind,
            'global_asset_id': str,
            'specific_asset_ids': List[SpecificAssetId],
            'asset_type': str,
            'default_thumbnail': Resource
        }

        self.attribute_map = {
            'asset_kind': 'assetKind',
            'global_asset_id': 'globalAssetId',
            'specific_asset_ids': 'specificAssetIds',
            'asset_type': 'assetType',
            'default_thumbnail': 'defaultThumbnail'
        }

        self._asset_kind = asset_kind
        self._global_asset_id = global_asset_id
        self._specific_asset_ids = specific_asset_ids
        self._asset_type = asset_type
        self._default_thumbnail = default_thumbnail

    @classmethod
    def from_dict(cls, dikt) -> 'AssetInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssetInformation of this AssetInformation.  # noqa: E501
        :rtype: AssetInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_kind(self) -> AssetKind:
        """Gets the asset_kind of this AssetInformation.


        :return: The asset_kind of this AssetInformation.
        :rtype: AssetKind
        """
        return self._asset_kind

    @asset_kind.setter
    def asset_kind(self, asset_kind: AssetKind):
        """Sets the asset_kind of this AssetInformation.


        :param asset_kind: The asset_kind of this AssetInformation.
        :type asset_kind: AssetKind
        """
        if asset_kind is None:
            raise ValueError("Invalid value for `asset_kind`, must not be `None`")  # noqa: E501

        self._asset_kind = asset_kind

    @property
    def global_asset_id(self) -> str:
        """Gets the global_asset_id of this AssetInformation.


        :return: The global_asset_id of this AssetInformation.
        :rtype: str
        """
        return self._global_asset_id

    @global_asset_id.setter
    def global_asset_id(self, global_asset_id: str):
        """Sets the global_asset_id of this AssetInformation.


        :param global_asset_id: The global_asset_id of this AssetInformation.
        :type global_asset_id: str
        """
        if global_asset_id is not None and len(global_asset_id) > 2000:
            raise ValueError("Invalid value for `global_asset_id`, length must be less than or equal to `2000`")  # noqa: E501
        if global_asset_id is not None and len(global_asset_id) < 1:
            raise ValueError("Invalid value for `global_asset_id`, length must be greater than or equal to `1`")  # noqa: E501
        if global_asset_id is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', global_asset_id):  # noqa: E501
            raise ValueError("Invalid value for `global_asset_id`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._global_asset_id = global_asset_id

    @property
    def specific_asset_ids(self) -> List[SpecificAssetId]:
        """Gets the specific_asset_ids of this AssetInformation.


        :return: The specific_asset_ids of this AssetInformation.
        :rtype: List[SpecificAssetId]
        """
        return self._specific_asset_ids

    @specific_asset_ids.setter
    def specific_asset_ids(self, specific_asset_ids: List[SpecificAssetId]):
        """Sets the specific_asset_ids of this AssetInformation.


        :param specific_asset_ids: The specific_asset_ids of this AssetInformation.
        :type specific_asset_ids: List[SpecificAssetId]
        """
        if specific_asset_ids is not None and len(specific_asset_ids) < 1:
            raise ValueError("Invalid value for `specific_asset_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._specific_asset_ids = specific_asset_ids

    @property
    def asset_type(self) -> str:
        """Gets the asset_type of this AssetInformation.


        :return: The asset_type of this AssetInformation.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type: str):
        """Sets the asset_type of this AssetInformation.


        :param asset_type: The asset_type of this AssetInformation.
        :type asset_type: str
        """
        if asset_type is not None and len(asset_type) > 2000:
            raise ValueError("Invalid value for `asset_type`, length must be less than or equal to `2000`")  # noqa: E501
        if asset_type is not None and len(asset_type) < 1:
            raise ValueError("Invalid value for `asset_type`, length must be greater than or equal to `1`")  # noqa: E501
        if asset_type is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', asset_type):  # noqa: E501
            raise ValueError("Invalid value for `asset_type`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._asset_type = asset_type

    @property
    def default_thumbnail(self) -> Resource:
        """Gets the default_thumbnail of this AssetInformation.


        :return: The default_thumbnail of this AssetInformation.
        :rtype: Resource
        """
        return self._default_thumbnail

    @default_thumbnail.setter
    def default_thumbnail(self, default_thumbnail: Resource):
        """Sets the default_thumbnail of this AssetInformation.


        :param default_thumbnail: The default_thumbnail of this AssetInformation.
        :type default_thumbnail: Resource
        """

        self._default_thumbnail = default_thumbnail
