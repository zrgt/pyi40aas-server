from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ..models.base_model import Model
from .. import util


class FileValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type=None, value=None):  # noqa: E501
        """FileValue - a model defined in OpenAPI

        :param content_type: The content_type of this FileValue.  # noqa: E501
        :type content_type: str
        :param value: The value of this FileValue.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'content_type': str,
            'value': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'value': 'value'
        }

        self._content_type = content_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'FileValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileValue of this FileValue.  # noqa: E501
        :rtype: FileValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self) -> str:
        """Gets the content_type of this FileValue.


        :return: The content_type of this FileValue.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type: str):
        """Sets the content_type of this FileValue.


        :param content_type: The content_type of this FileValue.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        if content_type is not None and len(content_type) > 100:
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `100`")  # noqa: E501
        if content_type is not None and len(content_type) < 1:
            raise ValueError("Invalid value for `content_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._content_type = content_type

    @property
    def value(self) -> str:
        """Gets the value of this FileValue.


        :return: The value of this FileValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this FileValue.


        :param value: The value of this FileValue.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and len(value) > 2000:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2000`")  # noqa: E501
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")  # noqa: E501

        self._value = value
