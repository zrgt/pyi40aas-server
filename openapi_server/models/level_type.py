from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class LevelType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min=None, nom=None, typ=None, max=None):  # noqa: E501
        """LevelType - a model defined in OpenAPI

        :param min: The min of this LevelType.  # noqa: E501
        :type min: bool
        :param nom: The nom of this LevelType.  # noqa: E501
        :type nom: bool
        :param typ: The typ of this LevelType.  # noqa: E501
        :type typ: bool
        :param max: The max of this LevelType.  # noqa: E501
        :type max: bool
        """
        self.openapi_types = {
            'min': bool,
            'nom': bool,
            'typ': bool,
            'max': bool
        }

        self.attribute_map = {
            'min': 'min',
            'nom': 'nom',
            'typ': 'typ',
            'max': 'max'
        }

        self._min = min
        self._nom = nom
        self._typ = typ
        self._max = max

    @classmethod
    def from_dict(cls, dikt) -> 'LevelType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LevelType of this LevelType.  # noqa: E501
        :rtype: LevelType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min(self) -> bool:
        """Gets the min of this LevelType.


        :return: The min of this LevelType.
        :rtype: bool
        """
        return self._min

    @min.setter
    def min(self, min: bool):
        """Sets the min of this LevelType.


        :param min: The min of this LevelType.
        :type min: bool
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def nom(self) -> bool:
        """Gets the nom of this LevelType.


        :return: The nom of this LevelType.
        :rtype: bool
        """
        return self._nom

    @nom.setter
    def nom(self, nom: bool):
        """Sets the nom of this LevelType.


        :param nom: The nom of this LevelType.
        :type nom: bool
        """
        if nom is None:
            raise ValueError("Invalid value for `nom`, must not be `None`")  # noqa: E501

        self._nom = nom

    @property
    def typ(self) -> bool:
        """Gets the typ of this LevelType.


        :return: The typ of this LevelType.
        :rtype: bool
        """
        return self._typ

    @typ.setter
    def typ(self, typ: bool):
        """Sets the typ of this LevelType.


        :param typ: The typ of this LevelType.
        :type typ: bool
        """
        if typ is None:
            raise ValueError("Invalid value for `typ`, must not be `None`")  # noqa: E501

        self._typ = typ

    @property
    def max(self) -> bool:
        """Gets the max of this LevelType.


        :return: The max of this LevelType.
        :rtype: bool
        """
        return self._max

    @max.setter
    def max(self, max: bool):
        """Sets the max of this LevelType.


        :param max: The max of this LevelType.
        :type max: bool
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max
