from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.execution_state import ExecutionState
from openapi_server.models.message import Message
from openapi_server.models.operation_variable import OperationVariable
from openapi_server import util

from openapi_server.models.execution_state import ExecutionState  # noqa: E501
from openapi_server.models.message import Message  # noqa: E501
from openapi_server.models.operation_variable import OperationVariable  # noqa: E501

class OperationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages=None, execution_state=None, success=None, inoutput_arguments=None, output_arguments=None):  # noqa: E501
        """OperationResult - a model defined in OpenAPI

        :param messages: The messages of this OperationResult.  # noqa: E501
        :type messages: List[Message]
        :param execution_state: The execution_state of this OperationResult.  # noqa: E501
        :type execution_state: ExecutionState
        :param success: The success of this OperationResult.  # noqa: E501
        :type success: bool
        :param inoutput_arguments: The inoutput_arguments of this OperationResult.  # noqa: E501
        :type inoutput_arguments: List[OperationVariable]
        :param output_arguments: The output_arguments of this OperationResult.  # noqa: E501
        :type output_arguments: List[OperationVariable]
        """
        self.openapi_types = {
            'messages': List[Message],
            'execution_state': ExecutionState,
            'success': bool,
            'inoutput_arguments': List[OperationVariable],
            'output_arguments': List[OperationVariable]
        }

        self.attribute_map = {
            'messages': 'messages',
            'execution_state': 'executionState',
            'success': 'success',
            'inoutput_arguments': 'inoutputArguments',
            'output_arguments': 'outputArguments'
        }

        self._messages = messages
        self._execution_state = execution_state
        self._success = success
        self._inoutput_arguments = inoutput_arguments
        self._output_arguments = output_arguments

    @classmethod
    def from_dict(cls, dikt) -> 'OperationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationResult of this OperationResult.  # noqa: E501
        :rtype: OperationResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self) -> List[Message]:
        """Gets the messages of this OperationResult.


        :return: The messages of this OperationResult.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: List[Message]):
        """Sets the messages of this OperationResult.


        :param messages: The messages of this OperationResult.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def execution_state(self) -> ExecutionState:
        """Gets the execution_state of this OperationResult.


        :return: The execution_state of this OperationResult.
        :rtype: ExecutionState
        """
        return self._execution_state

    @execution_state.setter
    def execution_state(self, execution_state: ExecutionState):
        """Sets the execution_state of this OperationResult.


        :param execution_state: The execution_state of this OperationResult.
        :type execution_state: ExecutionState
        """

        self._execution_state = execution_state

    @property
    def success(self) -> bool:
        """Gets the success of this OperationResult.


        :return: The success of this OperationResult.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success: bool):
        """Sets the success of this OperationResult.


        :param success: The success of this OperationResult.
        :type success: bool
        """

        self._success = success

    @property
    def inoutput_arguments(self) -> List[OperationVariable]:
        """Gets the inoutput_arguments of this OperationResult.


        :return: The inoutput_arguments of this OperationResult.
        :rtype: List[OperationVariable]
        """
        return self._inoutput_arguments

    @inoutput_arguments.setter
    def inoutput_arguments(self, inoutput_arguments: List[OperationVariable]):
        """Sets the inoutput_arguments of this OperationResult.


        :param inoutput_arguments: The inoutput_arguments of this OperationResult.
        :type inoutput_arguments: List[OperationVariable]
        """

        self._inoutput_arguments = inoutput_arguments

    @property
    def output_arguments(self) -> List[OperationVariable]:
        """Gets the output_arguments of this OperationResult.


        :return: The output_arguments of this OperationResult.
        :rtype: List[OperationVariable]
        """
        return self._output_arguments

    @output_arguments.setter
    def output_arguments(self, output_arguments: List[OperationVariable]):
        """Sets the output_arguments of this OperationResult.


        :param output_arguments: The output_arguments of this OperationResult.
        :type output_arguments: List[OperationVariable]
        """

        self._output_arguments = output_arguments
