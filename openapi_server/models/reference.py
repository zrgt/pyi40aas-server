from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.key import Key
from openapi_server.models.reference_parent import ReferenceParent
from openapi_server.models.reference_types import ReferenceTypes
from openapi_server import util

from openapi_server.models.key import Key  # noqa: E501
from openapi_server.models.reference_parent import ReferenceParent  # noqa: E501
from openapi_server.models.reference_types import ReferenceTypes  # noqa: E501

class Reference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, keys=None, referred_semantic_id=None):  # noqa: E501
        """Reference - a model defined in OpenAPI

        :param type: The type of this Reference.  # noqa: E501
        :type type: ReferenceTypes
        :param keys: The keys of this Reference.  # noqa: E501
        :type keys: List[Key]
        :param referred_semantic_id: The referred_semantic_id of this Reference.  # noqa: E501
        :type referred_semantic_id: ReferenceParent
        """
        self.openapi_types = {
            'type': ReferenceTypes,
            'keys': List[Key],
            'referred_semantic_id': ReferenceParent
        }

        self.attribute_map = {
            'type': 'type',
            'keys': 'keys',
            'referred_semantic_id': 'referredSemanticId'
        }

        self._type = type
        self._keys = keys
        self._referred_semantic_id = referred_semantic_id

    @classmethod
    def from_dict(cls, dikt) -> 'Reference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Reference of this Reference.  # noqa: E501
        :rtype: Reference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> ReferenceTypes:
        """Gets the type of this Reference.


        :return: The type of this Reference.
        :rtype: ReferenceTypes
        """
        return self._type

    @type.setter
    def type(self, type: ReferenceTypes):
        """Sets the type of this Reference.


        :param type: The type of this Reference.
        :type type: ReferenceTypes
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def keys(self) -> List[Key]:
        """Gets the keys of this Reference.


        :return: The keys of this Reference.
        :rtype: List[Key]
        """
        return self._keys

    @keys.setter
    def keys(self, keys: List[Key]):
        """Sets the keys of this Reference.


        :param keys: The keys of this Reference.
        :type keys: List[Key]
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")  # noqa: E501
        if keys is not None and len(keys) < 1:
            raise ValueError("Invalid value for `keys`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._keys = keys

    @property
    def referred_semantic_id(self) -> ReferenceParent:
        """Gets the referred_semantic_id of this Reference.


        :return: The referred_semantic_id of this Reference.
        :rtype: ReferenceParent
        """
        return self._referred_semantic_id

    @referred_semantic_id.setter
    def referred_semantic_id(self, referred_semantic_id: ReferenceParent):
        """Sets the referred_semantic_id of this Reference.


        :param referred_semantic_id: The referred_semantic_id of this Reference.
        :type referred_semantic_id: ReferenceParent
        """

        self._referred_semantic_id = referred_semantic_id
