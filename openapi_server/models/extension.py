from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.data_type_def_xsd import DataTypeDefXsd
from openapi_server.models.reference import Reference
import re
from openapi_server import util

from openapi_server.models.data_type_def_xsd import DataTypeDefXsd  # noqa: E501
from openapi_server.models.reference import Reference  # noqa: E501
import re  # noqa: E501

class Extension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, semantic_id=None, supplemental_semantic_ids=None, name=None, value_type=None, value=None, refers_to=None):  # noqa: E501
        """Extension - a model defined in OpenAPI

        :param semantic_id: The semantic_id of this Extension.  # noqa: E501
        :type semantic_id: Reference
        :param supplemental_semantic_ids: The supplemental_semantic_ids of this Extension.  # noqa: E501
        :type supplemental_semantic_ids: List[Reference]
        :param name: The name of this Extension.  # noqa: E501
        :type name: str
        :param value_type: The value_type of this Extension.  # noqa: E501
        :type value_type: DataTypeDefXsd
        :param value: The value of this Extension.  # noqa: E501
        :type value: str
        :param refers_to: The refers_to of this Extension.  # noqa: E501
        :type refers_to: List[Reference]
        """
        self.openapi_types = {
            'semantic_id': Reference,
            'supplemental_semantic_ids': List[Reference],
            'name': str,
            'value_type': DataTypeDefXsd,
            'value': str,
            'refers_to': List[Reference]
        }

        self.attribute_map = {
            'semantic_id': 'semanticId',
            'supplemental_semantic_ids': 'supplementalSemanticIds',
            'name': 'name',
            'value_type': 'valueType',
            'value': 'value',
            'refers_to': 'refersTo'
        }

        self._semantic_id = semantic_id
        self._supplemental_semantic_ids = supplemental_semantic_ids
        self._name = name
        self._value_type = value_type
        self._value = value
        self._refers_to = refers_to

    @classmethod
    def from_dict(cls, dikt) -> 'Extension':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Extension of this Extension.  # noqa: E501
        :rtype: Extension
        """
        return util.deserialize_model(dikt, cls)

    @property
    def semantic_id(self) -> Reference:
        """Gets the semantic_id of this Extension.


        :return: The semantic_id of this Extension.
        :rtype: Reference
        """
        return self._semantic_id

    @semantic_id.setter
    def semantic_id(self, semantic_id: Reference):
        """Sets the semantic_id of this Extension.


        :param semantic_id: The semantic_id of this Extension.
        :type semantic_id: Reference
        """

        self._semantic_id = semantic_id

    @property
    def supplemental_semantic_ids(self) -> List[Reference]:
        """Gets the supplemental_semantic_ids of this Extension.


        :return: The supplemental_semantic_ids of this Extension.
        :rtype: List[Reference]
        """
        return self._supplemental_semantic_ids

    @supplemental_semantic_ids.setter
    def supplemental_semantic_ids(self, supplemental_semantic_ids: List[Reference]):
        """Sets the supplemental_semantic_ids of this Extension.


        :param supplemental_semantic_ids: The supplemental_semantic_ids of this Extension.
        :type supplemental_semantic_ids: List[Reference]
        """
        if supplemental_semantic_ids is not None and len(supplemental_semantic_ids) < 1:
            raise ValueError("Invalid value for `supplemental_semantic_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supplemental_semantic_ids = supplemental_semantic_ids

    @property
    def name(self) -> str:
        """Gets the name of this Extension.


        :return: The name of this Extension.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Extension.


        :param name: The name of this Extension.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search(r'^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^([\t\n\r -퟿-�]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/`")  # noqa: E501

        self._name = name

    @property
    def value_type(self) -> DataTypeDefXsd:
        """Gets the value_type of this Extension.


        :return: The value_type of this Extension.
        :rtype: DataTypeDefXsd
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type: DataTypeDefXsd):
        """Sets the value_type of this Extension.


        :param value_type: The value_type of this Extension.
        :type value_type: DataTypeDefXsd
        """

        self._value_type = value_type

    @property
    def value(self) -> str:
        """Gets the value of this Extension.


        :return: The value of this Extension.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this Extension.


        :param value: The value of this Extension.
        :type value: str
        """

        self._value = value

    @property
    def refers_to(self) -> List[Reference]:
        """Gets the refers_to of this Extension.


        :return: The refers_to of this Extension.
        :rtype: List[Reference]
        """
        return self._refers_to

    @refers_to.setter
    def refers_to(self, refers_to: List[Reference]):
        """Sets the refers_to of this Extension.


        :param refers_to: The refers_to of this Extension.
        :type refers_to: List[Reference]
        """
        if refers_to is not None and len(refers_to) < 1:
            raise ValueError("Invalid value for `refers_to`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._refers_to = refers_to
