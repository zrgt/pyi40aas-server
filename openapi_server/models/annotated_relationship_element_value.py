from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.reference_value import ReferenceValue
from openapi_server import util

from openapi_server.models.reference_value import ReferenceValue  # noqa: E501

class AnnotatedRelationshipElementValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first=None, second=None, annotations=None):  # noqa: E501
        """AnnotatedRelationshipElementValue - a model defined in OpenAPI

        :param first: The first of this AnnotatedRelationshipElementValue.  # noqa: E501
        :type first: ReferenceValue
        :param second: The second of this AnnotatedRelationshipElementValue.  # noqa: E501
        :type second: ReferenceValue
        :param annotations: The annotations of this AnnotatedRelationshipElementValue.  # noqa: E501
        :type annotations: List[object]
        """
        self.openapi_types = {
            'first': ReferenceValue,
            'second': ReferenceValue,
            'annotations': List[object]
        }

        self.attribute_map = {
            'first': 'first',
            'second': 'second',
            'annotations': 'annotations'
        }

        self._first = first
        self._second = second
        self._annotations = annotations

    @classmethod
    def from_dict(cls, dikt) -> 'AnnotatedRelationshipElementValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnnotatedRelationshipElementValue of this AnnotatedRelationshipElementValue.  # noqa: E501
        :rtype: AnnotatedRelationshipElementValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self) -> ReferenceValue:
        """Gets the first of this AnnotatedRelationshipElementValue.


        :return: The first of this AnnotatedRelationshipElementValue.
        :rtype: ReferenceValue
        """
        return self._first

    @first.setter
    def first(self, first: ReferenceValue):
        """Sets the first of this AnnotatedRelationshipElementValue.


        :param first: The first of this AnnotatedRelationshipElementValue.
        :type first: ReferenceValue
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")  # noqa: E501

        self._first = first

    @property
    def second(self) -> ReferenceValue:
        """Gets the second of this AnnotatedRelationshipElementValue.


        :return: The second of this AnnotatedRelationshipElementValue.
        :rtype: ReferenceValue
        """
        return self._second

    @second.setter
    def second(self, second: ReferenceValue):
        """Sets the second of this AnnotatedRelationshipElementValue.


        :param second: The second of this AnnotatedRelationshipElementValue.
        :type second: ReferenceValue
        """
        if second is None:
            raise ValueError("Invalid value for `second`, must not be `None`")  # noqa: E501

        self._second = second

    @property
    def annotations(self) -> List[object]:
        """Gets the annotations of this AnnotatedRelationshipElementValue.


        :return: The annotations of this AnnotatedRelationshipElementValue.
        :rtype: List[object]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: List[object]):
        """Sets the annotations of this AnnotatedRelationshipElementValue.


        :param annotations: The annotations of this AnnotatedRelationshipElementValue.
        :type annotations: List[object]
        """

        self._annotations = annotations
