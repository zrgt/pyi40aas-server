from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtocolInformationSecurityAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, key=None, value=None):  # noqa: E501
        """ProtocolInformationSecurityAttributes - a model defined in OpenAPI

        :param type: The type of this ProtocolInformationSecurityAttributes.  # noqa: E501
        :type type: str
        :param key: The key of this ProtocolInformationSecurityAttributes.  # noqa: E501
        :type key: str
        :param value: The value of this ProtocolInformationSecurityAttributes.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'type': str,
            'key': str,
            'value': str
        }

        self.attribute_map = {
            'type': 'type',
            'key': 'key',
            'value': 'value'
        }

        self._type = type
        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'ProtocolInformationSecurityAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProtocolInformation_securityAttributes of this ProtocolInformationSecurityAttributes.  # noqa: E501
        :rtype: ProtocolInformationSecurityAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ProtocolInformationSecurityAttributes.


        :return: The type of this ProtocolInformationSecurityAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ProtocolInformationSecurityAttributes.


        :param type: The type of this ProtocolInformationSecurityAttributes.
        :type type: str
        """
        allowed_values = ["NONE", "RFC_TLSA", "W3C_DID"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def key(self) -> str:
        """Gets the key of this ProtocolInformationSecurityAttributes.


        :return: The key of this ProtocolInformationSecurityAttributes.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ProtocolInformationSecurityAttributes.


        :param key: The key of this ProtocolInformationSecurityAttributes.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def value(self) -> str:
        """Gets the value of this ProtocolInformationSecurityAttributes.


        :return: The value of this ProtocolInformationSecurityAttributes.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ProtocolInformationSecurityAttributes.


        :param value: The value of this ProtocolInformationSecurityAttributes.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
