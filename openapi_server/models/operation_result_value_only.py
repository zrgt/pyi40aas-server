from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.execution_state import ExecutionState
from openapi_server.models.message import Message
from openapi_server import util

from openapi_server.models.execution_state import ExecutionState  # noqa: E501
from openapi_server.models.message import Message  # noqa: E501

class OperationResultValueOnly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages=None, execution_state=None, success=None, inoutput_arguments=None, output_arguments=None):  # noqa: E501
        """OperationResultValueOnly - a model defined in OpenAPI

        :param messages: The messages of this OperationResultValueOnly.  # noqa: E501
        :type messages: List[Message]
        :param execution_state: The execution_state of this OperationResultValueOnly.  # noqa: E501
        :type execution_state: ExecutionState
        :param success: The success of this OperationResultValueOnly.  # noqa: E501
        :type success: bool
        :param inoutput_arguments: The inoutput_arguments of this OperationResultValueOnly.  # noqa: E501
        :type inoutput_arguments: object
        :param output_arguments: The output_arguments of this OperationResultValueOnly.  # noqa: E501
        :type output_arguments: object
        """
        self.openapi_types = {
            'messages': List[Message],
            'execution_state': ExecutionState,
            'success': bool,
            'inoutput_arguments': object,
            'output_arguments': object
        }

        self.attribute_map = {
            'messages': 'messages',
            'execution_state': 'executionState',
            'success': 'success',
            'inoutput_arguments': 'inoutputArguments',
            'output_arguments': 'outputArguments'
        }

        self._messages = messages
        self._execution_state = execution_state
        self._success = success
        self._inoutput_arguments = inoutput_arguments
        self._output_arguments = output_arguments

    @classmethod
    def from_dict(cls, dikt) -> 'OperationResultValueOnly':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationResultValueOnly of this OperationResultValueOnly.  # noqa: E501
        :rtype: OperationResultValueOnly
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self) -> List[Message]:
        """Gets the messages of this OperationResultValueOnly.


        :return: The messages of this OperationResultValueOnly.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: List[Message]):
        """Sets the messages of this OperationResultValueOnly.


        :param messages: The messages of this OperationResultValueOnly.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def execution_state(self) -> ExecutionState:
        """Gets the execution_state of this OperationResultValueOnly.


        :return: The execution_state of this OperationResultValueOnly.
        :rtype: ExecutionState
        """
        return self._execution_state

    @execution_state.setter
    def execution_state(self, execution_state: ExecutionState):
        """Sets the execution_state of this OperationResultValueOnly.


        :param execution_state: The execution_state of this OperationResultValueOnly.
        :type execution_state: ExecutionState
        """

        self._execution_state = execution_state

    @property
    def success(self) -> bool:
        """Gets the success of this OperationResultValueOnly.


        :return: The success of this OperationResultValueOnly.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success: bool):
        """Sets the success of this OperationResultValueOnly.


        :param success: The success of this OperationResultValueOnly.
        :type success: bool
        """

        self._success = success

    @property
    def inoutput_arguments(self) -> object:
        """Gets the inoutput_arguments of this OperationResultValueOnly.

        The ValueOnly serialization of submodel elements (patternProperties and propertyNames will be supported propably with OpenApi 3.1). The full description of the generic JSON validation schema for the ValueOnly-serialization can be found in chapter 11.4.3 in Details of the Asset Administration Shell Part 2.   # noqa: E501

        :return: The inoutput_arguments of this OperationResultValueOnly.
        :rtype: object
        """
        return self._inoutput_arguments

    @inoutput_arguments.setter
    def inoutput_arguments(self, inoutput_arguments: object):
        """Sets the inoutput_arguments of this OperationResultValueOnly.

        The ValueOnly serialization of submodel elements (patternProperties and propertyNames will be supported propably with OpenApi 3.1). The full description of the generic JSON validation schema for the ValueOnly-serialization can be found in chapter 11.4.3 in Details of the Asset Administration Shell Part 2.   # noqa: E501

        :param inoutput_arguments: The inoutput_arguments of this OperationResultValueOnly.
        :type inoutput_arguments: object
        """

        self._inoutput_arguments = inoutput_arguments

    @property
    def output_arguments(self) -> object:
        """Gets the output_arguments of this OperationResultValueOnly.

        The ValueOnly serialization of submodel elements (patternProperties and propertyNames will be supported propably with OpenApi 3.1). The full description of the generic JSON validation schema for the ValueOnly-serialization can be found in chapter 11.4.3 in Details of the Asset Administration Shell Part 2.   # noqa: E501

        :return: The output_arguments of this OperationResultValueOnly.
        :rtype: object
        """
        return self._output_arguments

    @output_arguments.setter
    def output_arguments(self, output_arguments: object):
        """Sets the output_arguments of this OperationResultValueOnly.

        The ValueOnly serialization of submodel elements (patternProperties and propertyNames will be supported propably with OpenApi 3.1). The full description of the generic JSON validation schema for the ValueOnly-serialization can be found in chapter 11.4.3 in Details of the Asset Administration Shell Part 2.   # noqa: E501

        :param output_arguments: The output_arguments of this OperationResultValueOnly.
        :type output_arguments: object
        """

        self._output_arguments = output_arguments
