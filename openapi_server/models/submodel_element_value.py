from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.annotated_relationship_element_value import AnnotatedRelationshipElementValue
from openapi_server.models.basic_event_element_value import BasicEventElementValue
from openapi_server.models.blob_value import BlobValue
from openapi_server.models.entity_type import EntityType
from openapi_server.models.entity_value import EntityValue
from openapi_server.models.file_value import FileValue
from openapi_server.models.key import Key
from openapi_server.models.property_value import PropertyValue
from openapi_server.models.range_value import RangeValue
from openapi_server.models.reference_element_value import ReferenceElementValue
from openapi_server.models.reference_types import ReferenceTypes
from openapi_server.models.reference_value import ReferenceValue
from openapi_server.models.relationship_element_value import RelationshipElementValue
import re
from openapi_server import util

from openapi_server.models.annotated_relationship_element_value import AnnotatedRelationshipElementValue  # noqa: E501
from openapi_server.models.basic_event_element_value import BasicEventElementValue  # noqa: E501
from openapi_server.models.blob_value import BlobValue  # noqa: E501
from openapi_server.models.entity_type import EntityType  # noqa: E501
from openapi_server.models.entity_value import EntityValue  # noqa: E501
from openapi_server.models.file_value import FileValue  # noqa: E501
from openapi_server.models.key import Key  # noqa: E501
from openapi_server.models.property_value import PropertyValue  # noqa: E501
from openapi_server.models.range_value import RangeValue  # noqa: E501
from openapi_server.models.reference_element_value import ReferenceElementValue  # noqa: E501
from openapi_server.models.reference_types import ReferenceTypes  # noqa: E501
from openapi_server.models.reference_value import ReferenceValue  # noqa: E501
from openapi_server.models.relationship_element_value import RelationshipElementValue  # noqa: E501
from openapi_server.models.submodel_element_value import SubmodelElementValue  # noqa: E501
import re  # noqa: E501

class SubmodelElementValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, observed=None, content_type=None, value=None, max=None, min=None, type=None, keys=None, first=None, second=None, annotations=None, entity_type=None, global_asset_id=None, specific_asset_ids=None, statements=None):  # noqa: E501
        """SubmodelElementValue - a model defined in OpenAPI

        :param observed: The observed of this SubmodelElementValue.  # noqa: E501
        :type observed: ReferenceValue
        :param content_type: The content_type of this SubmodelElementValue.  # noqa: E501
        :type content_type: str
        :param value: The value of this SubmodelElementValue.  # noqa: E501
        :type value: str
        :param max: The max of this SubmodelElementValue.  # noqa: E501
        :type max: float
        :param min: The min of this SubmodelElementValue.  # noqa: E501
        :type min: float
        :param type: The type of this SubmodelElementValue.  # noqa: E501
        :type type: ReferenceTypes
        :param keys: The keys of this SubmodelElementValue.  # noqa: E501
        :type keys: List[Key]
        :param first: The first of this SubmodelElementValue.  # noqa: E501
        :type first: ReferenceValue
        :param second: The second of this SubmodelElementValue.  # noqa: E501
        :type second: ReferenceValue
        :param annotations: The annotations of this SubmodelElementValue.  # noqa: E501
        :type annotations: List[object]
        :param entity_type: The entity_type of this SubmodelElementValue.  # noqa: E501
        :type entity_type: EntityType
        :param global_asset_id: The global_asset_id of this SubmodelElementValue.  # noqa: E501
        :type global_asset_id: str
        :param specific_asset_ids: The specific_asset_ids of this SubmodelElementValue.  # noqa: E501
        :type specific_asset_ids: List[object]
        :param statements: The statements of this SubmodelElementValue.  # noqa: E501
        :type statements: List[object]
        """
        self.openapi_types = {
            'observed': ReferenceValue,
            'content_type': str,
            'value': str,
            'max': float,
            'min': float,
            'type': ReferenceTypes,
            'keys': List[Key],
            'first': ReferenceValue,
            'second': ReferenceValue,
            'annotations': List[object],
            'entity_type': EntityType,
            'global_asset_id': str,
            'specific_asset_ids': List[object],
            'statements': List[object]
        }

        self.attribute_map = {
            'observed': 'observed',
            'content_type': 'contentType',
            'value': 'value',
            'max': 'max',
            'min': 'min',
            'type': 'type',
            'keys': 'keys',
            'first': 'first',
            'second': 'second',
            'annotations': 'annotations',
            'entity_type': 'entityType',
            'global_asset_id': 'globalAssetId',
            'specific_asset_ids': 'specificAssetIds',
            'statements': 'statements'
        }

        self._observed = observed
        self._content_type = content_type
        self._value = value
        self._max = max
        self._min = min
        self._type = type
        self._keys = keys
        self._first = first
        self._second = second
        self._annotations = annotations
        self._entity_type = entity_type
        self._global_asset_id = global_asset_id
        self._specific_asset_ids = specific_asset_ids
        self._statements = statements

    @classmethod
    def from_dict(cls, dikt) -> 'SubmodelElementValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubmodelElementValue of this SubmodelElementValue.  # noqa: E501
        :rtype: SubmodelElementValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def observed(self) -> ReferenceValue:
        """Gets the observed of this SubmodelElementValue.


        :return: The observed of this SubmodelElementValue.
        :rtype: ReferenceValue
        """
        return self._observed

    @observed.setter
    def observed(self, observed: ReferenceValue):
        """Sets the observed of this SubmodelElementValue.


        :param observed: The observed of this SubmodelElementValue.
        :type observed: ReferenceValue
        """
        if observed is None:
            raise ValueError("Invalid value for `observed`, must not be `None`")  # noqa: E501

        self._observed = observed

    @property
    def content_type(self) -> str:
        """Gets the content_type of this SubmodelElementValue.


        :return: The content_type of this SubmodelElementValue.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type: str):
        """Sets the content_type of this SubmodelElementValue.


        :param content_type: The content_type of this SubmodelElementValue.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        if content_type is not None and len(content_type) > 100:
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `100`")  # noqa: E501
        if content_type is not None and len(content_type) < 1:
            raise ValueError("Invalid value for `content_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._content_type = content_type

    @property
    def value(self) -> str:
        """Gets the value of this SubmodelElementValue.


        :return: The value of this SubmodelElementValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this SubmodelElementValue.


        :param value: The value of this SubmodelElementValue.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and len(value) > 2000:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2000`")  # noqa: E501
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")  # noqa: E501

        self._value = value

    @property
    def max(self) -> float:
        """Gets the max of this SubmodelElementValue.


        :return: The max of this SubmodelElementValue.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max: float):
        """Sets the max of this SubmodelElementValue.


        :param max: The max of this SubmodelElementValue.
        :type max: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max

    @property
    def min(self) -> float:
        """Gets the min of this SubmodelElementValue.


        :return: The min of this SubmodelElementValue.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min: float):
        """Sets the min of this SubmodelElementValue.


        :param min: The min of this SubmodelElementValue.
        :type min: float
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def type(self) -> ReferenceTypes:
        """Gets the type of this SubmodelElementValue.


        :return: The type of this SubmodelElementValue.
        :rtype: ReferenceTypes
        """
        return self._type

    @type.setter
    def type(self, type: ReferenceTypes):
        """Sets the type of this SubmodelElementValue.


        :param type: The type of this SubmodelElementValue.
        :type type: ReferenceTypes
        """

        self._type = type

    @property
    def keys(self) -> List[Key]:
        """Gets the keys of this SubmodelElementValue.


        :return: The keys of this SubmodelElementValue.
        :rtype: List[Key]
        """
        return self._keys

    @keys.setter
    def keys(self, keys: List[Key]):
        """Sets the keys of this SubmodelElementValue.


        :param keys: The keys of this SubmodelElementValue.
        :type keys: List[Key]
        """

        self._keys = keys

    @property
    def first(self) -> ReferenceValue:
        """Gets the first of this SubmodelElementValue.


        :return: The first of this SubmodelElementValue.
        :rtype: ReferenceValue
        """
        return self._first

    @first.setter
    def first(self, first: ReferenceValue):
        """Sets the first of this SubmodelElementValue.


        :param first: The first of this SubmodelElementValue.
        :type first: ReferenceValue
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")  # noqa: E501

        self._first = first

    @property
    def second(self) -> ReferenceValue:
        """Gets the second of this SubmodelElementValue.


        :return: The second of this SubmodelElementValue.
        :rtype: ReferenceValue
        """
        return self._second

    @second.setter
    def second(self, second: ReferenceValue):
        """Sets the second of this SubmodelElementValue.


        :param second: The second of this SubmodelElementValue.
        :type second: ReferenceValue
        """
        if second is None:
            raise ValueError("Invalid value for `second`, must not be `None`")  # noqa: E501

        self._second = second

    @property
    def annotations(self) -> List[object]:
        """Gets the annotations of this SubmodelElementValue.


        :return: The annotations of this SubmodelElementValue.
        :rtype: List[object]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: List[object]):
        """Sets the annotations of this SubmodelElementValue.


        :param annotations: The annotations of this SubmodelElementValue.
        :type annotations: List[object]
        """

        self._annotations = annotations

    @property
    def entity_type(self) -> EntityType:
        """Gets the entity_type of this SubmodelElementValue.


        :return: The entity_type of this SubmodelElementValue.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type: EntityType):
        """Sets the entity_type of this SubmodelElementValue.


        :param entity_type: The entity_type of this SubmodelElementValue.
        :type entity_type: EntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def global_asset_id(self) -> str:
        """Gets the global_asset_id of this SubmodelElementValue.


        :return: The global_asset_id of this SubmodelElementValue.
        :rtype: str
        """
        return self._global_asset_id

    @global_asset_id.setter
    def global_asset_id(self, global_asset_id: str):
        """Sets the global_asset_id of this SubmodelElementValue.


        :param global_asset_id: The global_asset_id of this SubmodelElementValue.
        :type global_asset_id: str
        """
        if global_asset_id is not None and len(global_asset_id) > 2000:
            raise ValueError("Invalid value for `global_asset_id`, length must be less than or equal to `2000`")  # noqa: E501
        if global_asset_id is not None and len(global_asset_id) < 1:
            raise ValueError("Invalid value for `global_asset_id`, length must be greater than or equal to `1`")  # noqa: E501
        if global_asset_id is not None and not re.search(r'^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\U00010000-\U0010FFFF]*$', global_asset_id):  # noqa: E501
            raise ValueError("Invalid value for `global_asset_id`, must be a follow pattern or equal to `/^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\U00010000-\U0010FFFF]*$/`")  # noqa: E501

        self._global_asset_id = global_asset_id

    @property
    def specific_asset_ids(self) -> List[object]:
        """Gets the specific_asset_ids of this SubmodelElementValue.


        :return: The specific_asset_ids of this SubmodelElementValue.
        :rtype: List[object]
        """
        return self._specific_asset_ids

    @specific_asset_ids.setter
    def specific_asset_ids(self, specific_asset_ids: List[object]):
        """Sets the specific_asset_ids of this SubmodelElementValue.


        :param specific_asset_ids: The specific_asset_ids of this SubmodelElementValue.
        :type specific_asset_ids: List[object]
        """

        self._specific_asset_ids = specific_asset_ids

    @property
    def statements(self) -> List[object]:
        """Gets the statements of this SubmodelElementValue.


        :return: The statements of this SubmodelElementValue.
        :rtype: List[object]
        """
        return self._statements

    @statements.setter
    def statements(self, statements: List[object]):
        """Sets the statements of this SubmodelElementValue.


        :param statements: The statements of this SubmodelElementValue.
        :type statements: List[object]
        """
        if statements is None:
            raise ValueError("Invalid value for `statements`, must not be `None`")  # noqa: E501

        self._statements = statements
