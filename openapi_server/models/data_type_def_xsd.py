from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DataTypeDefXsd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    XS_COLON_ANY_URI = 'xs:anyURI'
    XS_COLON_BASE64_BINARY = 'xs:base64Binary'
    XS_COLON_BOOLEAN = 'xs:boolean'
    XS_COLON_BYTE = 'xs:byte'
    XS_COLON_DATE = 'xs:date'
    XS_COLON_DATE_TIME = 'xs:dateTime'
    XS_COLON_DECIMAL = 'xs:decimal'
    XS_COLON_DOUBLE = 'xs:double'
    XS_COLON_DURATION = 'xs:duration'
    XS_COLON_FLOAT = 'xs:float'
    XS_COLON_G_DAY = 'xs:gDay'
    XS_COLON_G_MONTH = 'xs:gMonth'
    XS_COLON_G_MONTH_DAY = 'xs:gMonthDay'
    XS_COLON_G_YEAR = 'xs:gYear'
    XS_COLON_G_YEAR_MONTH = 'xs:gYearMonth'
    XS_COLON_HEX_BINARY = 'xs:hexBinary'
    XS_COLON_INT = 'xs:int'
    XS_COLON_INTEGER = 'xs:integer'
    XS_COLON_LONG = 'xs:long'
    XS_COLON_NEGATIVE_INTEGER = 'xs:negativeInteger'
    XS_COLON_NON_NEGATIVE_INTEGER = 'xs:nonNegativeInteger'
    XS_COLON_NON_POSITIVE_INTEGER = 'xs:nonPositiveInteger'
    XS_COLON_POSITIVE_INTEGER = 'xs:positiveInteger'
    XS_COLON_SHORT = 'xs:short'
    XS_COLON_STRING = 'xs:string'
    XS_COLON_TIME = 'xs:time'
    XS_COLON_UNSIGNED_BYTE = 'xs:unsignedByte'
    XS_COLON_UNSIGNED_INT = 'xs:unsignedInt'
    XS_COLON_UNSIGNED_LONG = 'xs:unsignedLong'
    XS_COLON_UNSIGNED_SHORT = 'xs:unsignedShort'
    def __init__(self):  # noqa: E501
        """DataTypeDefXsd - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'DataTypeDefXsd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataTypeDefXsd of this DataTypeDefXsd.  # noqa: E501
        :rtype: DataTypeDefXsd
        """
        return util.deserialize_model(dikt, cls)
