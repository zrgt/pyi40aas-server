from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.execution_state import ExecutionState
from openapi_server.models.message import Message
from openapi_server import util

from openapi_server.models.execution_state import ExecutionState  # noqa: E501
from openapi_server.models.message import Message  # noqa: E501

class BaseOperationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages=None, execution_state=None, success=None):  # noqa: E501
        """BaseOperationResult - a model defined in OpenAPI

        :param messages: The messages of this BaseOperationResult.  # noqa: E501
        :type messages: List[Message]
        :param execution_state: The execution_state of this BaseOperationResult.  # noqa: E501
        :type execution_state: ExecutionState
        :param success: The success of this BaseOperationResult.  # noqa: E501
        :type success: bool
        """
        self.openapi_types = {
            'messages': List[Message],
            'execution_state': ExecutionState,
            'success': bool
        }

        self.attribute_map = {
            'messages': 'messages',
            'execution_state': 'executionState',
            'success': 'success'
        }

        self._messages = messages
        self._execution_state = execution_state
        self._success = success

    @classmethod
    def from_dict(cls, dikt) -> 'BaseOperationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseOperationResult of this BaseOperationResult.  # noqa: E501
        :rtype: BaseOperationResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self) -> List[Message]:
        """Gets the messages of this BaseOperationResult.


        :return: The messages of this BaseOperationResult.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: List[Message]):
        """Sets the messages of this BaseOperationResult.


        :param messages: The messages of this BaseOperationResult.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def execution_state(self) -> ExecutionState:
        """Gets the execution_state of this BaseOperationResult.


        :return: The execution_state of this BaseOperationResult.
        :rtype: ExecutionState
        """
        return self._execution_state

    @execution_state.setter
    def execution_state(self, execution_state: ExecutionState):
        """Sets the execution_state of this BaseOperationResult.


        :param execution_state: The execution_state of this BaseOperationResult.
        :type execution_state: ExecutionState
        """

        self._execution_state = execution_state

    @property
    def success(self) -> bool:
        """Gets the success of this BaseOperationResult.


        :return: The success of this BaseOperationResult.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success: bool):
        """Sets the success of this BaseOperationResult.


        :param success: The success of this BaseOperationResult.
        :type success: bool
        """

        self._success = success
