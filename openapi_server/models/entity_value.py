from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.entity_type import EntityType
import re
from openapi_server import util

from openapi_server.models.entity_type import EntityType  # noqa: E501
import re  # noqa: E501

class EntityValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_type=None, global_asset_id=None, specific_asset_ids=None, statements=None):  # noqa: E501
        """EntityValue - a model defined in OpenAPI

        :param entity_type: The entity_type of this EntityValue.  # noqa: E501
        :type entity_type: EntityType
        :param global_asset_id: The global_asset_id of this EntityValue.  # noqa: E501
        :type global_asset_id: str
        :param specific_asset_ids: The specific_asset_ids of this EntityValue.  # noqa: E501
        :type specific_asset_ids: List[object]
        :param statements: The statements of this EntityValue.  # noqa: E501
        :type statements: List[object]
        """
        self.openapi_types = {
            'entity_type': EntityType,
            'global_asset_id': str,
            'specific_asset_ids': List[object],
            'statements': List[object]
        }

        self.attribute_map = {
            'entity_type': 'entityType',
            'global_asset_id': 'globalAssetId',
            'specific_asset_ids': 'specificAssetIds',
            'statements': 'statements'
        }

        self._entity_type = entity_type
        self._global_asset_id = global_asset_id
        self._specific_asset_ids = specific_asset_ids
        self._statements = statements

    @classmethod
    def from_dict(cls, dikt) -> 'EntityValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EntityValue of this EntityValue.  # noqa: E501
        :rtype: EntityValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_type(self) -> EntityType:
        """Gets the entity_type of this EntityValue.


        :return: The entity_type of this EntityValue.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type: EntityType):
        """Sets the entity_type of this EntityValue.


        :param entity_type: The entity_type of this EntityValue.
        :type entity_type: EntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def global_asset_id(self) -> str:
        """Gets the global_asset_id of this EntityValue.


        :return: The global_asset_id of this EntityValue.
        :rtype: str
        """
        return self._global_asset_id

    @global_asset_id.setter
    def global_asset_id(self, global_asset_id: str):
        """Sets the global_asset_id of this EntityValue.


        :param global_asset_id: The global_asset_id of this EntityValue.
        :type global_asset_id: str
        """
        if global_asset_id is not None and len(global_asset_id) > 2000:
            raise ValueError("Invalid value for `global_asset_id`, length must be less than or equal to `2000`")  # noqa: E501
        if global_asset_id is not None and len(global_asset_id) < 1:
            raise ValueError("Invalid value for `global_asset_id`, length must be greater than or equal to `1`")  # noqa: E501
        if global_asset_id is not None and not re.search(r'^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\U00010000-\U0010FFFF]*$', global_asset_id):  # noqa: E501
            raise ValueError("Invalid value for `global_asset_id`, must be a follow pattern or equal to `/^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\U00010000-\U0010FFFF]*$/`")  # noqa: E501

        self._global_asset_id = global_asset_id

    @property
    def specific_asset_ids(self) -> List[object]:
        """Gets the specific_asset_ids of this EntityValue.


        :return: The specific_asset_ids of this EntityValue.
        :rtype: List[object]
        """
        return self._specific_asset_ids

    @specific_asset_ids.setter
    def specific_asset_ids(self, specific_asset_ids: List[object]):
        """Sets the specific_asset_ids of this EntityValue.


        :param specific_asset_ids: The specific_asset_ids of this EntityValue.
        :type specific_asset_ids: List[object]
        """

        self._specific_asset_ids = specific_asset_ids

    @property
    def statements(self) -> List[object]:
        """Gets the statements of this EntityValue.


        :return: The statements of this EntityValue.
        :rtype: List[object]
        """
        return self._statements

    @statements.setter
    def statements(self, statements: List[object]):
        """Sets the statements of this EntityValue.


        :param statements: The statements of this EntityValue.
        :type statements: List[object]
        """
        if statements is None:
            raise ValueError("Invalid value for `statements`, must not be `None`")  # noqa: E501

        self._statements = statements
